#!/bin/bash

clear
unset wpspeedv
wpspeedv=v0.4.1
echo
echo -e "   _       __      _____                     __ "
echo -e "  | |     / /___  / ___/____  ___  ___  ____/ / "
echo -e "  | | /| / / __ \ \__ \/ __ \/ _ \/ _ \/ __  /  "
echo -e "  | |/ |/ / /_/ / __/ / /_/ /  __/  __/ /_/ /   "
echo -e "  |__/|__/ .___/ /___/ .___/\___/\___/\__,_/    "
echo -e "        /_/  $wpspeedv /_/   a few wp performance tests"
echo

unset loadhistory ;
unset wpspeed ;
unset boxx ;
unset corecount ;
unset highload ;
unset LastMonth ;
unset TodayMonth ;
unset thismonthfile ;
unset lastmonthfile ;
unset LastMonth ;
unset TodayMonth ;
unset HISTFILE
alias wp='/usr/php/54/usr/bin/php-cli /usr/local/bin/wp'
export LANG="en_US.utf8" ;
unset boxx
unset boxfullname
boxfullname=`hostname`
boxx=`hostname | sed 's/\..*$//'`
unset apps

echo -en "  This tool is for troubleshooting performance issues with WordPress sites,\n  and with the server. Available commands:\n\n  loadhistory: see when the load on $boxx was high in the last 30 days\n\n  wpspeed: See a quick optimization report of the WordPress install in the\n  current directory.\n\n  wpspeed -p, --plugins Show how many times the site calls to each plugin\n  on each page load.\n\n  apps: Find out what scripts are installed on this hosting account.\n\n"

function loadhistory () {

## load checker tool

export LANG="en_US.utf8" ;
boxx=`hostname | sed 's/\..*$//'` ;
corecount=`nproc`;
highload=$((${corecount}*8));
if [ $highload -gt 100 ] 
then
highload=100 ;
fi


echo
echo -e "\e[1;32m  Load Report:\e[0m"
echo -e "\n  $boxx has $corecount cores, so generally speaking any load over $highload is\n  considered high. This is just a quick way of pinpointing when the\n  load was high in the past, it's not definitive by any means.\n\n  Listed below are dates and times when the load has gotten that high\n  in the last 30 days or so. If nothing is listed for a date, it means\n  the load didn't get up to $highload or above on that day. You can ignore\n  any 'Cannot open /var/log/sa/' errors, those are just days when we\n  don't have logs.\n\n  The report is being generated now, it may take a minute or two.\n"

LastMonth=`date +%b --date="last month"` ; TomorrowDayOfTheMonth=`date +%d  --date="2 day"` ; for lastmonthfile in `seq -w $TomorrowDayOfTheMonth 31` ; do echo -e "/var/log/sa/sa$lastmonthfile"; sar -q -f "/var/log/sa/sa$lastmonthfile" | awk -v highload="$highload" '{if (NR>1 && $5 > highload) {print $1 $2 " - " $5}}'; done | sed -r 's/...(AM|PM)/\1/g' | sed "s/\/var\/log\/sa\/sa/\n$LastMonth /g" | sed -e ':a;$!{N;s/\n..........ldavg-1//;ba;}' | uniq ;

TodayMonth=`date +%b` ; TodayDayOfTheMonth=`date +%d` ; for thismonthfile in `seq -w 1 $TodayDayOfTheMonth` ; do echo -e "/var/log/sa/sa$thismonthfile"; sar -q -f "/var/log/sa/sa$thismonthfile" | awk -v highload="$highload" '{if (NR>1 && $5 > highload) {print $1 $2 " - " $5}}'; done | sed -r 's/...(AM|PM)/\1/g' | sed "s/\/var\/log\/sa\/sa/\n$TodayMonth /g" | sed -e ':a;$!{N;s/\n..........ldavg-1//;ba;}' | uniq ;

unset boxx ;
unset corecount ;
unset highload ;
unset LastMonth ;
unset TodayMonth ;
unset thismonthfile ;
unset lastmonthfile ;
unset LastMonth ;
unset TodayMonth ;
 
## end of load checker tool

}

function wpspeed () {


##############################################################################################################
##                                                  Changelog                                               ##
##############################################################################################################
#                                                                                                            #
# v0.1 First version, all features introduced.                                                               #
#                                                                                                            #
# v0.2 Spelling errors fixed. WpSpeed now recognizes "Cache-Control" headers in the browser cache check.     #
#                                                                                                            #
# v0.3 The "wp" and "load" commands changed to "wpspeed" and "loadhistory". Added "apps" command.            #
# Commands work for whole ssh session. Script only needs to be imported once now.                            #
#                                                                                                            #
# v0.4 Added "--plugins" flag and "--help" flag to wpspeed command.                                          #
# "Zen Cache Pro" added to known caching plugins list.                                                       #
#                                                                                                            #
##############################################################################################################



if [[ ! -z "$1" && ! "$1" == "--help" && ! "$1" == "-help" && ! "$1" == "help" && ! "$1" == "-h" && ! "$1" == "h" && ! "$1" == "--plugins" && ! "$1" == "-plugins" && ! "$1" == "-p" && ! "$1" == "p" && ! "$1" == "plugin" && ! "$1" == "plugins" ]]; then
echo -e "$1 isn't a valid command. Try 'wpspeed --help' for a list of available commands."
fi


if [[ $1 == "--help" || $1 == "-help" || $1 == "help" || $1 == "h" || $1 == "-h" ]]; then
echo -en "  WpSpeed Help: Available commands:\n\n  loadhistory: see when the load on $boxx was high in the last 30 days\n\n  wpspeed: See a quick optimization report of the WordPress install in the\n  current directory.\n\n  wpspeed -p, --plugins Show how many times the site calls to each plugin\n  on each page load.\n\n  apps: Find out what scripts are installed on this hosting account.\n\n"
fi



if [[ $1 == "--plugins" || $1 == "-plugins" || $1 == "-p" || $1 == "p" || $1 == "plugin" || $1 == "plugins" ]]; then

#######################################
####       wpspeed --plugins       ####
#######################################

unset WPcorefiles
WPcorefiles=$(find -maxdepth 1 -name "wp-config.php" )
if [[ -z "$WPcorefiles" ]]; then
  echo -e "\e[1;31m\nError: WordPress core files not found in this directory.\e[0m \n\n(This is supposed to be run inside the directory where WordPress is.)\n"
 else

echo -e "\nHow many times this site calls to each plugin on per page load:\n" ;

strace php index.php 2>&1 | perl -ne 'if (/(mu-plugins|plugins)\/([\w\d-_]*)/ ) { print "$1/$2\n" }' | sort | uniq -c | sort -n | sed '/mu-plugins\/sso/ d' | sed '/-en_[[:upper:]][[:upper:]]/d' ;
fi

fi



#######################################
####           wpspeed             ####
#######################################

if [[ -z "$1" ]]; then
   ## wpspeed tool

unset WPcorefiles

WPcorefiles=$(find -maxdepth 1 -name "wp-config.php" )
if [[ -z "$WPcorefiles" ]]; then
  echo -e "\e[1;31m\nError: WordPress core files not found in this directory.\e[0m \n\n(This is supposed to be run inside the directory where WordPress is.)\n"
 else

echo -en "\nOptimization Report for " 
pwd | grep -o "`whoami`.*" | sed "s/$whoami//g"
echo

###################################
#  Checking for gzip compression  #
###################################

unset IsWThreeTotalCacheInstalled
if [ -d wp-content/plugins/w3-total-cache ] 
then
 IsWThreeTotalCacheInstalled="w3-total-cache"
fi
 
unset IsHtaccessFilePresent
IsHtaccessFilePresent=$(find -maxdepth 1 -name ".htaccess" )

if [[ -z "$IsWThreeTotalCacheInstalled" ]]; then

   if [[ -z "$IsHtaccessFilePresent" ]]; then
       echo -e "1) Gzip compression: \e[1;31mdoes not appear to be enabled (no .htaccess file found).\e[0m \n   Suggestion: Install wp-super-cache or add code directly to .htaccess"
  else
   echo -en "1) Gzip compression:"
    if egrep -q "AddOutputFilterByType DEFLATE|mod_gzip" .htaccess
    then
     echo -en "\e[0;32m appears to be enabled in .htaccess.\e[0m\n"
    else
     echo -e "\e[1;31m does not appear to be enabled in .htaccess.\e[0m\n   Suggestion: Install wp-super-cache or add code directly to .htaccess"
    fi 
  fi
    else

    if [[ -z "$IsHtaccessFilePresent" ]]; then
    echo -e "1) Gzip compression: \e[1;31mdoes not appear to be enabled (no .htaccess file found).\e[0m \n   Suggestion: Since wp-super-cache is already installed, the easiest fix\n   would be to enable it there."
  else
   echo -en "1) Gzip compression:"
    if egrep -q "AddOutputFilterByType DEFLATE|mod_gzip" .htaccess
    then
     echo -en "\e[0;32m appears to be enabled in .htaccess.\e[0m\n"
    else
     echo -e "\e[1;31m does not appear to be enabled in .htaccess.\e[0m\n   Suggestion: Since wp-super-cache is already installed, the easiest fix\n   would be to enable it there."
    fi 

fi
fi



###########################################
#  Checking for database cleanup plugins  #
###########################################

unset InstalledDBCleanupPlugins

echo -en "2) Database cleanup plugins:"

if [ -d wp-content/plugins/wp-sweep ] 
then
 InstalledDBCleanupPlugins="wp-sweep,"
fi

if [ -d wp-content/plugins/wp-optimize ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-optimize,"
fi

if [ -d wp-content/plugins/wp-clean-up-optimizer ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-clean-up-optimizer,"
fi

if [ -d wp-content/plugins/wp-optimize-by-xtraffic ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-optimize-by-xtraffic,"
fi

if [ -d wp-content/plugins/rvg-optimize-database ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins rvg-optimize-database,"
fi

if [ -d wp-content/plugins/optimize ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins optimize,"
fi

if [ -d wp-content/plugins/wp-database-optimizer ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-database-optimizer,"
fi

if [ -d wp-content/plugins/wuco-wp-ultimate-cleanup-optimization ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wuco-wp-ultimate-cleanup-optimization,"
fi

if [ -d wp-content/plugins/db-optimize ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins db-optimize,"
fi

if [ -d wp-content/plugins/vevida-optimizer ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins vevida-optimizer,"
fi

if [ -d wp-content/plugins/optimize-database ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins optimize-database,"
fi

if [ -d wp-content/plugins/advanced-database-cleaner ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins advanced-database-cleaner,"
fi

if [ -d wp-content/plugins/a2-optimized-wp ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins a2-optimized-wp,"
fi

if [ -d wp-content/plugins/better-delete-revision ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins better-delete-revision,"
fi

if [ -d wp-content/plugins/wp-dbmanager ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-dbmanager,"
fi

if [ -d wp-content/plugins/daily-cleaner-optimizer-lite ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins daily-cleaner-optimizer-lite,"
fi

if [ -d wp-content/plugins/wp-cleanfix ] 
then
 InstalledDBCleanupPlugins="$InstalledDBCleanupPlugins wp-cleanfix,"
fi

if [[ $InstalledDBCleanupPlugins ]]
then
 echo -en "\e[0;32m $InstalledDBCleanupPlugins installed.\n\e[0m"
else
 echo -e "\e[1;31m no known database cleanup plugins found.\e[0m\n   Suggestion: Install either the wp-sweep or wp-optimize plugin."
fi



############################################
#  Checking for image compression plugins  #
############################################

unset InstalledImgCompressionPlugins

echo -en "3) Image compression plugins:"

if [ -d wp-content/plugins/optimus ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins optimus,"
fi

if [ -d wp-content/plugins/tiny-compress-images ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins tiny-compress-images,"
fi

if [ -d wp-content/plugins/shortpixel-image-optimiser ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins shortpixel-image-optimiser,"
fi

if [ -d wp-content/plugins/imagerecycle-pdf-image-compression ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins imagerecycle-pdf-image-compression,"
fi

if [ -d wp-content/plugins/kraken-image-optimizer ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins kraken-image-optimizer,"
fi

if [ -d wp-content/plugins/wp-image-shrinker ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins wp-image-shrinker,"
fi

if [ -d wp-content/plugins/wp-tinypng ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins wp-tinypng,"
fi

if [ -d wp-content/plugins/ewww-image-optimizer ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins ewww-image-optimizer,"
fi

if [ -d wp-content/plugins/kraken-image-optimizer ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins kraken-image-optimizer,"
fi

if [ -d wp-content/plugins/shortpixel-image-optimiser ] 
then
 InstalledImgCompressionPlugins="$InstalledImgCompressionPlugins shortpixel-image-optimiser,"
fi

if [[ $InstalledImgCompressionPlugins ]]
then
 echo -en "\e[0;32m $InstalledImgCompressionPlugins installed.\n\e[0m"
else
 echo -e "\e[1;31m no known image compression plugins found.\e[0m\n\e[0;36m   Note: Customer may be compressing images manually instead of using a plugin.\e[0m\n    Suggestion: Install either tiny-compress-images or ewww-image-optimizer."
fi



##################################
#  Checking for caching plugins  #
##################################

unset InstalledCachingPlugins
unset IsWordfenceInstalled

echo -en "4) Caching plugins:"

if [ -d wp-content/plugins/wordfence ] 
then
 IsWordfenceInstalled="wordfence"
fi

if [ -d wp-content/plugins/aio-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins aio-cache,"
fi

if [ -d wp-content/plugins/alpha-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins alpha-cache,"
fi

if [ -d wp-content/plugins/bodi0s-easy-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins bodi0s-easy-cache,"
fi

if [ -d wp-content/plugins/cachify ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins cachify,"
fi

if [ -d wp-content/plugins/flexicache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins flexicache,"
fi

if [ -d wp-content/plugins/gator-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins gator-cache,"
fi

if [ -d wp-content/plugins/hyper-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins hyper-cache,"
fi

if [ -d wp-content/plugins/hyper-cache-extended ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins hyper-cache-extended,"
fi

if [ -d wp-content/plugins/lite-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins lite-cache,"
fi

if [ -d wp-content/plugins/next-level-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins next-level-cache,"
fi

if [ -d wp-content/plugins/really-static ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins really-static,"
fi

if [ -d wp-content/plugins/super-static-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins super-static-cache,"
fi

if [ -d wp-content/plugins/w3-total-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins w3-total-cache,"
fi

if [ -d wp-content/plugins/wp-cachecom ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins wp-cachecom,"
fi

if [ -d wp-content/plugins/wp-fast-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins wp-fast-cache,"
fi

if [ -d wp-content/plugins/wp-fastest-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins wp-fastest-cache,"
fi

if [ -d wp-content/plugins/wp-rocket ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins wp-rocket,"
fi

if [ -d wp-content/plugins/wp-super-cache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins wp-super-cache,"
fi

if [ -d wp-content/plugins/zencache ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins zencache,"
fi

if [ -d wp-content/plugins/zencache-pro ] 
then
 InstalledCachingPlugins="$InstalledCachingPlugins zencache-pro,"
fi

if [ -d wp-content/endurance-page-cache ]
then
 InstalledCachingPlugins="$InstalledCachingPlugins endurance-page-cache,"
fi

if [[ $IsWordfenceInstalled ]]
   then
     if [[ $InstalledCachingPlugins ]]
       then
         echo -en "\e[0;32m $InstalledCachingPlugins installed.\n\e[0m"
       else
         echo -e "\e[1;31m no known caching plugins found...sort of.\n\e[0;36m   WordFence is installed, which does have some basic caching features,\n   although almost no one uses them. WordFence is not the most effective\n   caching or complete caching solution. It's great for security though.\e[0m\n   Suggestion: Install endurance browser/page cache."
     fi
 else
   if [[ $InstalledCachingPlugins ]]
     then
       echo -en "\e[0;32m $InstalledCachingPlugins installed.\n\e[0m"
   else
     echo -e "\e[1;31m no known no caching plugins found.\e[0m"
   fi
fi



################################
#  Checking for browser cache  #
################################
unset IsHtaccessFilePresent
IsHtaccessFilePresent=$(find -maxdepth 1 -name ".htaccess" )
  if [[ -z "$IsHtaccessFilePresent" ]]; then
    echo -e "5) Browser cache rules: \e[1;31mdo not appear to be present (no .htaccess file found).\e[0m"
  else
   echo -en "5) Browser cache rules:"
    if egrep -q "AddType|ExpiresByType|Header set Cache-Control" .htaccess
    then
     echo -en "\e[0;32m appear to be present in .htaccess.\e[0m\n"
    else
     echo -en "\e[1;31m do not appear to be present in .htaccess.\e[0m\n"
    fi 
  fi



##########################################################################
# Check for number of plugins, and suggests P3 Profiler if not present   #
##########################################################################
unset WPPluginCount
WPPluginCount=`find wp-content/plugins/* -maxdepth 0 -type d | wc -l`
unset IsPThreePerformanceProfilerInstalled
if [ -d wp-content/plugins/p3-profiler ] 
then
 IsPThreePerformanceProfilerInstalled="p3-profiler"
fi

echo -en "6) Pinpointing Plugin Lag: There are $WPPluginCount plugins installed"

if [[ -z "$IsPThreePerformanceProfilerInstalled" ]]; then
    echo -e ".\n   Suggestion: Install p3-profiler (a plugin that helps pinpoint plugin lag)."
  else
   echo -e ", but p3-profiler (a\n   plugin that helps pinpoint plugin lag) is installed as well so it's safe to\n   assume the site's developer is aware of any plugin lag."
fi

##to convert new line to br (for making an output readable in html or php) use this | sed '{:q;N;s/\n/<br>/g;t q}'

#end of if then statement that checks if there's a wordpress install
fi  

#end of wpspeed
fi

}


function apps () {
cat ~/tmp/installedapps.yml
}
